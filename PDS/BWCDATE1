*                                                                     *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*                                                                     *
* 'BWCDATE1' RETURNS GREGORIAN DATE YYYYMMDD, JULIAN DAY JJJ, AND     *
* TIME HHMMSSTH. CODED TO BE REENTRANT (AND SERIALLY REUSABLE).       *
*                                                                     *
* OBTAIN CURRENT DATE AND TIME AND RETURN TO USER IN FORMAT:          *
*                                                                     *
* 01  DATE-TIME-VALUES.                                               *
*     05  CURRENT-DATE            PIC 9(08).  ==> YYYYMMDD            *
*     05  CURRENT-JULIAN          PIC 9(03).  ==> JJJ                 *
*     05  CURRENT-TIME            PIC 9(08)   ==> HHMMSSTH            *
*                                                                     *
* IF THE SYSTEM CLOCK ROUTINE FAILS, THE VALUES RETURNED TO THE       *
* CALLER WILL BE ALL ZEROS.                                           *
*                                                                     *
* THE RETURN CODE WILL ALWAYS BE SET TO ZERO.                         *
*                                                                     *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*                                                                     *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
* THE TWO MACROS 'SARE' AND 'DCRE' MAKE IT EASIER TO HAVE REENTRANT   *
* CODE WITH INITIAL VALUES THAT CAN BE CHANGED DURING THE EXECUTION   *
* OF THE ROUTINE. DCRE (STANDING FOR DEFINE CONSTANT - REENTRANT)     *
* CREATES TWO COPIES OF EACH VARIABLE. ONE OCCUPIES STORAGE IN THIS   *
* PROGRAM, AND IS USED TO INITIALIZE THE VALUE OF THE SECOND, WHICH   *
* IS LOCATED IN A GETMAIN-ED AREA MAPPED BY THE DSECT WHICH CONTAINS  *
* THE NAME OF THE VARIABLE BEING DEFINED.                             *
*                                                                     *
* SARE DEFINES THE REGISTER SAVE AREA WITHIN THE GETMAIN-ED AREA.     *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*                                                                     *
         MACRO
&NAME    SARE &DUMMY               SAVEAREA REENTRANT
SAVEAREA DSECT                     SAVEAREA DSECT
         DS    9D                  SAVEAREA STORAGE
&SYSECT  CSECT                     BACK TO PROGRAM CSECT
INST     LOCTR                     . NOW INSTRUCTION ZONE
         MEND
         MACRO
&NAME    DCRE  &DUMMY              DC - REENTRANT
         LCLA  &I                  OLD FORTRAN CONVENTIONS DIE HARD
         LCLC  &OPERAND            I'LL BUILD IT MYSELF
&OPERAND SETC  '&SYSLIST(1)'       SET TO INITIAL VALUE
&I       SETA  2                   START WITH 2ND POSITIONAL
.LOOP100 AIF   (&I GT N'&SYSLIST).SKIP200 GO IF FINISHED
&OPERAND SETC  '&OPERAND.,&SYSLIST(&I)' ADD THIS POSITIONAL
&I       SETA  &I+1                BUMP INDEX
         AGO   .LOOP100            BACK TO TRY AGAIN
.SKIP200 ANOP                      TAG FOR LOOP END
DATA     LOCTR                     ENTER DATA PORTION
         DC    &OPERAND            DEFINE INITIAL VALUE
SAVEAREA DSECT                     ENTER GETMAINED ZONE
&NAME    DS    &OPERAND            DEFINE NAME OF FIELD
&SYSECT  CSECT                     BACK TO PROGRAM CSECT
INST     LOCTR                     . AND BACK TO INTRUCTION ZONE
         MEND
         PRINT GEN                 WHO WANTS TO SEE MACRO EXPANSIONS?
BWCDATE1 AMODE 31                  BIG ADDRESSING MODE
BWCDATE1 RMODE ANY                 BUT I'LL LIVE ANYWHERE
BWCDATE1 CSECT                     DEFINE PROGRAM CONTROL SECTION
INST     LOCTR                     DEFINE INSTRUCTION ZONE
         USING BWCDATE1,R12        ENABLE BASE REG
         STM   R14,R12,12(R13)     STANDARD SAVE
         LR    R12,R15             PRIME BASE REG WITH VIRT ADDR
         XC    16(4,R13),16(R13)   SET ZERO RETURN CODE
         L     R11,0(,R1)          COPY ADDR OF USER PARMS
         STORAGE OBTAIN,LENGTH=WSLENGTH+72 GET DYNAMIC WORKING STORAGE
         ST    R1,8(,R13)          FORWARD CHAIN TO MY SAVE AREA
         ST    R13,4(,R1)          BACK CHAIN TO CALLER'S SAVE AREA
         LR    R13,R1              COPY MY SAVE AREA POINTER
         USING SAVEAREA,R13        SET SECOND BASE REG
         B     BEGIN               SKIP MARKERS
         DC    C'****    '
         DC    C'BWCDATE1 V1R1M0 COMPILED ON &SYSDATE AT &SYSTIME'
         DC    C'    ****'
BEGIN    MVC   SAVEAREA+72(WSLENGTH),WSBEG COPY INITIAL VALUES
         TIME  DEC,TDAREA,LINKAGE=SYSTEM,DATETYPE=YYYYMMDD
*                                                                     *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
* R15 IS SET BY THE TIME MACRO AS FOLLOWS:                            *
*  0 ==> SUCCESSFUL COMPLETION                                        *
*  4 ==> TOD CLOCKS ARE NOT INITIALIZED                               *
*  8 ==> TOD CLOCK IS NOT USABLE                                      *
* 12 ==> SYSTEM ERROR                                                 *
* 16 ==> ADDRESS LIST IN NOT IN ADDRESSABLE STORAGE                   *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*                                                                     *
         LTR   R15,R15             DID DATE FUNCTION WORK?
         BNZ   ERROR               B IF DIDN'T WORK
*                                                                     *
         UNPK  WORKZL9,DATE        EXPLODE DATE
         MVC   ZDATE,WORKZL9       COPY THE EIGHT IMPORTANT BYTES
         MVC   TDAREA+12(4),=F'0'  SET FOURTH WORD TO ZERO
         TIME  DEC,TDAREA,LINKAGE=SYSTEM,DATETYPE=YYYYDDD
         LTR   R15,R15             DID IT WORK THIS TIME?
         BNZ   ERROR               B IF IT DIDN'T WORK
         UNPK  WORKZL9,DATE        EXPLODE DATE
         MVC   ZJULIAN,WORKZL9+5   COPY THE THREE IMPORTANT BYTES
         UNPK  WORKZL9,TIME        EXPLODE TIME
         MVC   ZTIME,WORKZL9       COPY THE EIGHT IMPORTANT BYTES
         MVC   0(19,R11),ZDATE     GIVE THE ANSWER TO THE CALLER
         B     RETURN              USE STANDARD RETURN
ERROR    MVC   0(19,R11),ZEROS     GIVE ERROR VALUE TO CALLER
RETURN   LR    R1,R13              COPY ADDRESS OF DYNAMIC STORAGE
         L     R13,4(,R13)         RESTORE SAVE POINTER
         STORAGE RELEASE,LENGTH=WSLENGTH+72,ADDR=(1) GUESS?
         LM    R14,R12,12(R13)     RESTORE REGS
         BR    R14                 GOBACK
ZEROS    DC    19C'0'              USED TO SET INITIAL VALUE
         SARE ,                    DYNAMIC WORKING STORAGE
DATA     LOCTR                     DATA ZONE
WSBEG    DC    0D'0'               BEGINNING OF INITIALIZED PORTION
TDAREA   DCRE  0D'0',16X'00'
TIME     EQU   TDAREA+0,5,C'P'     DEFINE 'HHMMSSTHX+'
DATE     EQU   TDAREA+8,5,C'P'     DEFINE 'CCYYMMDDX+'
WORKZL9  DCRE  ZL9'0'              RESULT EX: 'F1F9F9F8F1F1F1F5C0'
ZDATE    DCRE  ZL8'0'              SET TO YYYYMMDD (ZONED DECIMAL)
ZJULIAN  DCRE  ZL3'0'              SET TO JJJ
ZTIME    DCRE  ZL8'0'              SET TO HHMMSSTH
DATA     LOCTR
WSEND    DS    0C                  END OF WORKING-STORAGE
WSLENGTH EQU   WSEND-WSBEG         LENGTH OF WORKING-STORAGE
         PUSH  PRINT               SAVE CURRENT SETTINGS
         PRINT OFF                 SKIP REGISTER EQUATES
         LCLA  &R                  REGISTER VARIABLE
&R       SETA  0                   WHERE ELSE SHOULD I START?
.REGLOOP ANOP                      TAG FOR LOOP BACK
R&R      EQU   &R                  REGISTER EQUATE
&R       SETA  &R+1                BUMP TO NEXT REGISTER
         AIF   (&R LT 16).REGLOOP  BACK IF NOT FINISHED
         POP   PRINT               REESTABLISH PREVIOUS PRINT OPTIONS
         END
